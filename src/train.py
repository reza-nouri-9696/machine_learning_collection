# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18j7k93Un2QceKW1j_T4EhMnZ-dDPDB9l
"""

# src/train.py
import os
import joblib
import config
import pandas as pd
from sklearn import metrics
from sklearn import tree
import argparse
import model_dispatcher

def run(fold, model):
    # Read the training data with folds
    df = pd.read_csv(config.TRAINING_FILE)
    # Training data is where kfold is not equal to the provided fold
    # Also, note that we reset the index
    df_train = df[df.kfold != fold].reset_index(drop=True)
    # Validation data is where kfold is equal to the provided fold
    df_valid = df[df.kfold == fold].reset_index(drop=True)
    # Drop the label column
    x_train = df_train.drop('label', axis=1).values
    y_train = df_train.label.values
    x_valid = df_valid.drop('label', axis=1).values
    y_valid = df_valid.label.values
    # Initialize a simple decision tree classifier
    clf = model_dispatcher.models[model]
    # Fit model on training data
    clf.fit(x_train, y_train)
    # Create predictions for validation samples
    preds = clf.predict(x_valid)
    accuracy = metrics.accuracy_score(y_valid, preds)
    print(f"Fold={fold}, Accuracy={accuracy}")
    # Save the model
    joblib.dump(clf, os.path.join(config.MODEL_OUTPUT, f"dt_{fold}.bin"))

if __name__ == "__main__":
    # Initialize ArgumentParser class of argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--fold", type=int)
    parser.add_argument("--model", type=str)
    args = parser.parse_args()
    run(
        fold=args.fold,
        model=args.model
    )
